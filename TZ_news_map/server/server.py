import socket
import threading
import json
from parser import fetch_events_from_map
from db import save_events, get_events_by_date
from collections import Counter

HOST = '0.0.0.0'
PORT = 9009

def log_grouped_statistics(events):
    counter = Counter(e['title'] for e in events)
    print("\n[—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –°–æ–±—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for title, count in counter.most_common():
        print(f"üîπ {title}: {count}")

def handle_client(conn, addr):
    print(f"[+] Client connected: {addr}")
    data = conn.recv(1024).decode().strip()
    print(f"[>] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")

    try:
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dd.mm.yyyy"
        date_str = data
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        events = fetch_events_from_map(date_str)
        log_grouped_statistics(events)
        save_events(events)
        # –ë–µ—Ä—ë–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –ø–æ –¥–∞—Ç–µ
        events_for_date = get_events_by_date(date_str)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
        conn.sendall(json.dumps(events_for_date, ensure_ascii=False).encode())
        print(f"[‚úì] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –∑–∞ {date_str}: {len(events_for_date)}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        print(error_msg)
        conn.sendall(error_msg.encode())

    conn.close()

def start_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        print(f"[+] Server listening on {HOST}:{PORT}")
        while True:
            conn, addr = s.accept()
            threading.Thread(target=handle_client, args=(conn, addr), daemon=True).start()

if __name__ == '__main__':
    start_server()
